/*
 * DocuSign Rooms API - v2
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NullablePermissions'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NullablePermissions'));
  } else {
    // Browser globals (root is window)
    if (!root.Docusign) {
      root.Docusign = {};
    }
    root.Docusign.Roles = factory(root.Docusign.ApiClient, root.Docusign.NullablePermissions);
  }
}(this, function(ApiClient, NullablePermissions) {
  'use strict';

  /**
   * The Roles model module.
   * @module model/Roles
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Roles</code>.
   * This object contains information about a role.
   * @alias module:model/Roles
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Roles</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Roles} obj Optional instance to populate.
   * @return {module:model/Roles} The populated <code>Roles</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('roleId'))
        obj.roleId = ApiClient.convertToType(data['roleId'], 'Number');
      if (data.hasOwnProperty('legacyRoleId'))
        obj.legacyRoleId = ApiClient.convertToType(data['legacyRoleId'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('isDefaultForAdmin'))
        obj.isDefaultForAdmin = ApiClient.convertToType(data['isDefaultForAdmin'], 'Boolean');
      if (data.hasOwnProperty('isExternal'))
        obj.isExternal = ApiClient.convertToType(data['isExternal'], 'Boolean');
      if (data.hasOwnProperty('createdDate'))
        obj.createdDate = ApiClient.convertToType(data['createdDate'], 'Date');
      if (data.hasOwnProperty('isAssigned'))
        obj.isAssigned = ApiClient.convertToType(data['isAssigned'], 'Boolean');
      if (data.hasOwnProperty('permissions'))
        obj.permissions = NullablePermissions.constructFromObject(data['permissions']);
    }
    return obj;
  }

  /**
   * In Rooms v6, this is the id of the company role assigned to the user.  You can assign external roles to users who aren't a part of your organization.  **Note**: If you are using Rooms v6, you must enter a `roleId` in requests. If you are using Rooms v5, you must enter a value for the `titleId` property instead.
   * @member {Number} roleId
   */
  exports.prototype.roleId = undefined;

  /**
   * The legacy name of the role in Rooms Version 5.
   * @member {String} legacyRoleId
   */
  exports.prototype.legacyRoleId = undefined;

  /**
   * The name of the role.   Examples:   - `Agent` - `Default Admin`
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * When **true**, the role is the default for account administrators.
   * @member {Boolean} isDefaultForAdmin
   */
  exports.prototype.isDefaultForAdmin = undefined;

  /**
   * When set to **true**, the role is an external role. You assign external roles to people from outside your company when you invite them into a room.
   * @member {Boolean} isExternal
   */
  exports.prototype.isExternal = undefined;

  /**
   * The UTC DateTime when the role was created.
   * @member {Date} createdDate
   */
  exports.prototype.createdDate = undefined;

  /**
   * When set to **true**, indicates that this role is currently assigned to a user.
   * @member {Boolean} isAssigned
   */
  exports.prototype.isAssigned = undefined;

  /**
   * An object that contains details about a manager user's permissions.  **Note**: These permissions only apply to Rooms v5.
   * @member {module:model/NullablePermissions} permissions
   */
  exports.prototype.permissions = undefined;

  return exports;

}));
