/*
 * DocuSign Rooms API - v2
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Docusign) {
      root.Docusign = {};
    }
    root.Docusign.Accounts = factory(root.Docusign.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Accounts model module.
   * @module model/Accounts
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Accounts</code>.
   * Information about accounts.
   * @alias module:model/Accounts
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Accounts</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Accounts} obj Optional instance to populate.
   * @return {module:model/Accounts} The populated <code>Accounts</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('companyId'))
        obj.companyId = ApiClient.convertToType(data['companyId'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('companyVersion'))
        obj.companyVersion = ApiClient.convertToType(data['companyVersion'], 'String');
      if (data.hasOwnProperty('docuSignAccountGuid'))
        obj.docuSignAccountGuid = ApiClient.convertToType(data['docuSignAccountGuid'], 'String');
      if (data.hasOwnProperty('defaultFieldSetId'))
        obj.defaultFieldSetId = ApiClient.convertToType(data['defaultFieldSetId'], 'String');
      if (data.hasOwnProperty('requireOfficeLibraryAssignments'))
        obj.requireOfficeLibraryAssignments = ApiClient.convertToType(data['requireOfficeLibraryAssignments'], 'Boolean');
    }
    return obj;
  }

  /**
   * The id of the company.
   * @member {Number} companyId
   */
  exports.prototype.companyId = undefined;

  /**
   * The name of the office.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The version of Rooms that the company uses. Read only. Possible values are:  - `v5`: Rooms Version 5. - `v6`: Rooms Version 6.
   * @member {module:model/Accounts.CompanyVersionEnum} companyVersion
   */
  exports.prototype.companyVersion = undefined;

  /**
   * The globally-unique identifier (GUID) for the DocuSign Rooms account.
   * @member {String} docuSignAccountGuid
   */
  exports.prototype.docuSignAccountGuid = undefined;

  /**
   * The id of the company's default field set. A field set is a set of data fields and the information about those data fields that the system uses to configure rooms. It corresponds to the **Admin > Company > Room Details** area in the console.
   * @member {String} defaultFieldSetId
   */
  exports.prototype.defaultFieldSetId = undefined;

  /**
   * 
   * @member {Boolean} requireOfficeLibraryAssignments
   */
  exports.prototype.requireOfficeLibraryAssignments = undefined;


  /**
   * Allowed values for the <code>companyVersion</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CompanyVersionEnum = {
    /**
     * value: "v5"
     * @const
     */
    v5: "v5",

    /**
     * value: "v6"
     * @const
     */
    v6: "v6"
  };

  return exports;

}));
