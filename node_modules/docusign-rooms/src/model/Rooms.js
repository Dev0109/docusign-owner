/*
 * DocuSign Rooms API - v2
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/NullableFieldData'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./NullableFieldData'));
  } else {
    // Browser globals (root is window)
    if (!root.Docusign) {
      root.Docusign = {};
    }
    root.Docusign.Rooms = factory(root.Docusign.ApiClient, root.Docusign.NullableFieldData);
  }
}(this, function(ApiClient, NullableFieldData) {
  'use strict';

  /**
   * The Rooms model module.
   * @module model/Rooms
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Rooms</code>.
   * The Rooms resource provides methods that enable you to create and manage rooms. In Rooms for Real Estate, a room is a collaborative digital space corresponding to a specific property. In Rooms for Mortgages, a room corresponds to a specific loan.
   * @alias module:model/Rooms
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>Rooms</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Rooms} obj Optional instance to populate.
   * @return {module:model/Rooms} The populated <code>Rooms</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('roomId'))
        obj.roomId = ApiClient.convertToType(data['roomId'], 'Number');
      if (data.hasOwnProperty('companyId'))
        obj.companyId = ApiClient.convertToType(data['companyId'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('officeId'))
        obj.officeId = ApiClient.convertToType(data['officeId'], 'Number');
      if (data.hasOwnProperty('createdDate'))
        obj.createdDate = ApiClient.convertToType(data['createdDate'], 'Date');
      if (data.hasOwnProperty('submittedForReviewDate'))
        obj.submittedForReviewDate = ApiClient.convertToType(data['submittedForReviewDate'], 'Date');
      if (data.hasOwnProperty('closedDate'))
        obj.closedDate = ApiClient.convertToType(data['closedDate'], 'Date');
      if (data.hasOwnProperty('rejectedDate'))
        obj.rejectedDate = ApiClient.convertToType(data['rejectedDate'], 'Date');
      if (data.hasOwnProperty('createdByUserId'))
        obj.createdByUserId = ApiClient.convertToType(data['createdByUserId'], 'Number');
      if (data.hasOwnProperty('rejectedByUserId'))
        obj.rejectedByUserId = ApiClient.convertToType(data['rejectedByUserId'], 'Number');
      if (data.hasOwnProperty('closedStatusId'))
        obj.closedStatusId = ApiClient.convertToType(data['closedStatusId'], 'String');
      if (data.hasOwnProperty('fieldData'))
        obj.fieldData = NullableFieldData.constructFromObject(data['fieldData']);
    }
    return obj;
  }

  /**
   * The id of the room.
   * @member {Number} roomId
   */
  exports.prototype.roomId = undefined;

  /**
   * The id of the company.
   * @member {Number} companyId
   */
  exports.prototype.companyId = undefined;

  /**
   * The name of the room.  Maximum Length: 100 characters.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The id of the office. This is the id that the system generated when you created the office.
   * @member {Number} officeId
   */
  exports.prototype.officeId = undefined;

  /**
   * The UTC date and time when the item was created. This is a read-only value that the service assigns.  Example: `2019-07-17T17:45:42.783Z`  
   * @member {Date} createdDate
   */
  exports.prototype.createdDate = undefined;

  /**
   * The UTC DateTime when the room was submitted for review.  **Note**: In Rooms v5, this is when an agent submitted the room to a manager. In Rooms v6, this is when a member with a role for which the **Submit rooms for review** permission is set to **true** submitted the room to a member with a role for which the **Review and close rooms** permission is set to **true**.
   * @member {Date} submittedForReviewDate
   */
  exports.prototype.submittedForReviewDate = undefined;

  /**
   * The UTC date and time when the room was closed.
   * @member {Date} closedDate
   */
  exports.prototype.closedDate = undefined;

  /**
   * The date on which the reviewer rejected the room. For example, a reviewer might reject closing a room if documentation is missing or the details are inaccurate.
   * @member {Date} rejectedDate
   */
  exports.prototype.rejectedDate = undefined;

  /**
   * The id of the user who created the room.
   * @member {Number} createdByUserId
   */
  exports.prototype.createdByUserId = undefined;

  /**
   * The id of the user who rejected the room.
   * @member {Number} rejectedByUserId
   */
  exports.prototype.rejectedByUserId = undefined;

  /**
   * The reason why a room was closed. Possible values are:  - `sold`: Property sold. - `dup`: Duplicate room. - `escrcncl`: Escrow canceled. - `inspctn`: Inspection issues. - `exp`: Listing expired. - `lostbuy`: Buyer withdrew. - `list`: Listing withdrawn.  - `newlist`: New listing. - `offrrjct`: Offer not accepted. - `pend`: Pending. An agent might use this status to temporarily hide a room from their Active rooms view if they are blocked on a task. When they are ready to reopen the room, they can quickly find it by filtering for rooms in `pending` status. - `lstcanc`: Listing canceled.  - `lstleave`: Listing released. - `sellwtdw`: Seller withdrew. - `nofin`: Buyer unable to finance. - `disciss`: Property disclosure issue. - `appiss`: Appraisal issues. - `mtgiss`: Mortgage issues. Use when details about why the buyer wasn't able to obtain financing are unknown. - `zoniss`: Zoning issues. - `attiss`: Attorney review issues. - `proplsd`: Property leased. Use for the list side of the transaction. - `tenlease`: Tenant signed lease. Use when an agent helps renters find a to lease.   
   * @member {String} closedStatusId
   */
  exports.prototype.closedStatusId = undefined;

  /**
   * The field data associated with a room. See [Rooms::GetRoomFieldData](/rooms-api/reference/Rooms/Rooms/GetRoomFieldData).
   * @member {module:model/NullableFieldData} fieldData
   */
  exports.prototype.fieldData = undefined;

  return exports;

}));
