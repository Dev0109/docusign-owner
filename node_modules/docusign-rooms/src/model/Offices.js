/*
 * DocuSign Rooms API - v2
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.Docusign) {
      root.Docusign = {};
    }
    root.Docusign.Offices = factory(root.Docusign.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The Offices model module.
   * @module model/Offices
   * @version 3.0.0
   */

  /**
   * Constructs a new <code>Offices</code>.
   * Object that contains information about an office in the Rooms account.
   * @alias module:model/Offices
   * @class
   * @param name {String} The name of the office.
   */
  var exports = function(name) {
    this.name = name;
  };

  /**
   * Constructs a <code>Offices</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Offices} obj Optional instance to populate.
   * @return {module:model/Offices} The populated <code>Offices</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('officeId'))
        obj.officeId = ApiClient.convertToType(data['officeId'], 'Number');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('regionId'))
        obj.regionId = ApiClient.convertToType(data['regionId'], 'Number');
      if (data.hasOwnProperty('address1'))
        obj.address1 = ApiClient.convertToType(data['address1'], 'String');
      if (data.hasOwnProperty('address2'))
        obj.address2 = ApiClient.convertToType(data['address2'], 'String');
      if (data.hasOwnProperty('city'))
        obj.city = ApiClient.convertToType(data['city'], 'String');
      if (data.hasOwnProperty('stateId'))
        obj.stateId = ApiClient.convertToType(data['stateId'], 'String');
      if (data.hasOwnProperty('postalCode'))
        obj.postalCode = ApiClient.convertToType(data['postalCode'], 'String');
      if (data.hasOwnProperty('countryId'))
        obj.countryId = ApiClient.convertToType(data['countryId'], 'String');
      if (data.hasOwnProperty('timeZoneId'))
        obj.timeZoneId = ApiClient.convertToType(data['timeZoneId'], 'String');
      if (data.hasOwnProperty('phone'))
        obj.phone = ApiClient.convertToType(data['phone'], 'String');
      if (data.hasOwnProperty('createdDate'))
        obj.createdDate = ApiClient.convertToType(data['createdDate'], 'Date');
    }
    return obj;
  }

  /**
   * The id of the office. This is the id that the system generated when you created the office.
   * @member {Number} officeId
   */
  exports.prototype.officeId = undefined;

  /**
   * The name of the office.
   * @member {String} name
   */
  exports.prototype.name = undefined;

  /**
   * The id of the region. This is the id that the system generated when you created the region.
   * @member {Number} regionId
   */
  exports.prototype.regionId = undefined;

  /**
   * First line of the office street address.
   * @member {String} address1
   */
  exports.prototype.address1 = undefined;

  /**
   * Second line of the office street address.
   * @member {String} address2
   */
  exports.prototype.address2 = undefined;

  /**
   * City name or metropolitan area of the office address.
   * @member {String} city
   */
  exports.prototype.city = undefined;

  /**
   * A concatenation of the two-letter country code with the state/province/region of the office address.  Example: `US-OH` (for Ohio)
   * @member {String} stateId
   */
  exports.prototype.stateId = undefined;

  /**
   * Postal code or ZIP code of the office address.
   * @member {String} postalCode
   */
  exports.prototype.postalCode = undefined;

  /**
   * The two-letter country code of the office address (for example, \"UK\" for United Kingdom).
   * @member {String} countryId
   */
  exports.prototype.countryId = undefined;

  /**
   * The id of the time zone for the office address.  Example: `eastern` (for the Eastern US Time Zone)
   * @member {String} timeZoneId
   */
  exports.prototype.timeZoneId = undefined;

  /**
   * Phone number of the office.
   * @member {String} phone
   */
  exports.prototype.phone = undefined;

  /**
   * The UTC DateTime when the office was created.  Example: `2019-07-17T17:45:42.783Z`  **Note**: This value is read-only.
   * @member {Date} createdDate
   */
  exports.prototype.createdDate = undefined;

  return exports;

}));
